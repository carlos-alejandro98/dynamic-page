{"version":3,"sources":["components/Model3D.js","App.js","index.js"],"names":["Model3D","mountRef","useRef","useEffect","currentRef","current","width","clientWidth","height","clientHeight","scene","THREE","background","camera","add","position","z","x","renderer","setSize","appendChild","domElement","controls","OrbitControls","enableDamping","geometry","material","color","cube","lookAt","ambientLight","pointLight","set","clock","resize","updatedWidth","updatedHeight","aspect","updateProjectionMatrix","window","addEventListener","animate","elapsedTime","getElapsedTime","rotation","y","Math","sin","update","render","requestAnimationFrame","removeChild","removeEventListener","ref","style","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"uOA+EeA,EA1EC,WACZ,IAAMC,EAAWC,iBAAO,MAmExB,OAjEAC,qBAAU,WACN,IAAMC,EAAaH,EAASI,QACPC,EAAgCF,EAA7CG,YAAkCC,EAAWJ,EAAzBK,aAEtBC,EAAQ,IAAIC,IAClBD,EAAME,WAAa,IAAID,IAAY,SACnC,IAAME,EAAS,IAAIF,IAAwB,GAAIL,EAAQE,EAAQ,IAAM,KACrEE,EAAMI,IAAID,GACVA,EAAOE,SAASC,EAAI,EACpBH,EAAOE,SAASE,EAAI,EAEpB,IAAMC,EAAW,IAAIP,IACrBO,EAASC,QAAQb,EAAOE,GACxBJ,EAAWgB,YAAYF,EAASG,YAEhC,IAAMC,EAAW,IAAIC,IAAcV,EAAQK,EAASG,YACpDC,EAASE,eAAgB,EAEzB,IAAMC,EAAW,IAAId,IAAkB,EAAG,EAAG,GACvCe,EAAW,IAAIf,IAAwB,CAAEgB,MAAO,SAChDC,EAAO,IAAIjB,IAAWc,EAAUC,GACtChB,EAAMI,IAAIc,GACVf,EAAOgB,OAAOD,EAAKb,UAGnB,IAAMe,EAAe,IAAInB,IAAmB,SAAU,GACtDD,EAAMI,IAAIgB,GAGV,IAAMC,EAAa,IAAIpB,IAAiB,SAAU,IAClDoB,EAAWhB,SAASiB,IAAI,EAAG,EAAG,GAC9BtB,EAAMI,IAAIiB,GAEV,IAAME,EAAQ,IAAItB,IAcZuB,EAAS,WACX,IAAMC,EAAe/B,EAAWG,YAC1B6B,EAAgBhC,EAAWK,aACjCS,EAASC,QAAQgB,EAAcC,GAC/BvB,EAAOwB,OAASF,EAAeC,EAC/BvB,EAAOyB,0BAOX,OAJAC,OAAOC,iBAAiB,SAAUN,GArBlB,SAAVO,IACF,IAAMC,EAAcT,EAAMU,iBAE1Bf,EAAKgB,SAASC,EAAIH,EAClBd,EAAKgB,SAAS3B,EAAIyB,EAClBd,EAAKb,SAAS8B,EAAIC,KAAKC,IAAIL,GAE3BpB,EAAS0B,SACT9B,EAAS+B,OAAOvC,EAAOG,GACvBqC,sBAAsBT,GAc1BA,GAEO,WACHrC,EAAW+C,YAAYjC,EAASG,YAChCkB,OAAOa,oBAAoB,SAAUlB,MAE1C,IAGC,qBAAKmB,IAAKpD,EAAUqD,MAAO,CAAEhD,MAAO,OAAQE,OAAQ,YChE7C+C,MARf,WACE,OACE,mCACE,cAAC,EAAD,OCANC,IAASP,OACP,cAAC,IAAMQ,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.175c295d.chunk.js","sourcesContent":["import { render } from '@testing-library/react';\r\nimport { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\n\r\nconst Model3D = () => {\r\n    const mountRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const currentRef = mountRef.current;\r\n        const { clientWidth: width, clientHeight: height } = currentRef;\r\n\r\n        const scene = new THREE.Scene();\r\n        scene.background = new THREE.Color('black');\r\n        const camera = new THREE.PerspectiveCamera(25, width / height, 0.01, 1000);\r\n        scene.add(camera);\r\n        camera.position.z = 6;\r\n        camera.position.x = 6;\r\n\r\n        const renderer = new THREE.WebGLRenderer();\r\n        renderer.setSize(width, height);\r\n        currentRef.appendChild(renderer.domElement);\r\n\r\n        const controls = new OrbitControls(camera, renderer.domElement);\r\n        controls.enableDamping = true;\r\n\r\n        const geometry = new THREE.BoxGeometry(1, 1, 1);\r\n        const material = new THREE.MeshPhongMaterial({ color: 0x0f2c64 });\r\n        const cube = new THREE.Mesh(geometry, material);\r\n        scene.add(cube);\r\n        camera.lookAt(cube.position);\r\n\r\n        //Luz\r\n        const ambientLight = new THREE.AmbientLight('yellow', 2);\r\n        scene.add(ambientLight);\r\n\r\n        //Color\r\n        const pointLight = new THREE.PointLight('yellow', 15);\r\n        pointLight.position.set(8, 8, 8);\r\n        scene.add(pointLight);\r\n\r\n        const clock = new THREE.Clock();\r\n        const animate = () => {\r\n            const elapsedTime = clock.getElapsedTime();\r\n\r\n            cube.rotation.y = elapsedTime;\r\n            cube.rotation.x = elapsedTime;\r\n            cube.position.y = Math.sin(elapsedTime);\r\n\r\n            controls.update();\r\n            renderer.render(scene, camera);\r\n            requestAnimationFrame(animate);\r\n        }\r\n\r\n        //Ajustar a pantalla\r\n        const resize = () => {\r\n            const updatedWidth = currentRef.clientWidth;\r\n            const updatedHeight = currentRef.clientHeight;\r\n            renderer.setSize(updatedWidth, updatedHeight);\r\n            camera.aspect = updatedWidth / updatedHeight;\r\n            camera.updateProjectionMatrix();\r\n        }\r\n\r\n        window.addEventListener('resize', resize);\r\n\r\n        animate();\r\n\r\n        return () => {\r\n            currentRef.removeChild(renderer.domElement);\r\n            window.removeEventListener('resize', resize);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div ref={mountRef} style={{ width: '100%', height: '100vh' }}>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Model3D;\r\n","import Model3D from \"./components/Model3D\";\n\nfunction App() {\n  return (\n    <>\n      <Model3D />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}